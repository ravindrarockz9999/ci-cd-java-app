name: Java Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven (Skip Tests)
        run: mvn clean package -DskipTests

      - name: List files in target directory
        run: ls -la target/
  
      - name: Upload Build Artifact (WAR)
        uses: actions/upload-artifact@v4
        with:
          name: java-app-war
          path: target/welcome-message-1.0-SNAPSHOT.war

  test:
    runs-on: [self-hosted, linux, x64]
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build and Run Tests with Maven
        run: mvn clean verify

      - name: List JaCoCo coverage report
        run: |
          ls -R target/site/jacoco || echo "No coverage report found"

      - name: Upload JaCoCo report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

  sonar-scan:
    name: sonar-scan
    runs-on: [self-hosted, linux, x64]
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Download JaCoCo report
        uses: actions/download-artifact@v4
        with:
          name: jacoco-report
          path: jacoco-report
          
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  security-scans:
    runs-on: [self-hosted, linux, x64]
    needs: sonar-scan
    steps:
      - uses: actions/checkout@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          semgrep_version: 1.76.0
          config: auto

      - name: Install Trivy CLI
        run: |
          sudo apt update
          sudo apt install -y wget apt-transport-https
          wget https://github.com/aquasecurity/trivy/releases/download/v0.38.3/trivy_0.38.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.38.3_Linux-64bit.deb
          trivy --version

      - name: Run Trivy Filesystem Scan
        run: |
          trivy fs . --format table --severity HIGH,CRITICAL

      - name: Install ClamAV and run malware scan
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav
          sudo systemctl stop clamav-freshclam 
          sudo freshclam
          clamscan -r . | tee malware-scan-results.txt

      - name: Upload malware scan results
        uses: actions/upload-artifact@v4
        with:
          name: malware-scan-results
          path: malware-scan-results.txt

  image-build:
    runs-on: [self-hosted, linux, x64]
    env:
      DOCKER_REPO: ravindra9999/ci-cd
      DOCKER_TAG: latest
    needs: security-scans
    steps:
      - uses: actions/checkout@v3

      - name: Download WAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app-war
          path: target

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_REPO:$DOCKER_TAG .
          docker images

      - name: Trivy Docker Image Scan
        run: trivy image $DOCKER_REPO:$DOCKER_TAG

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker Push
        run: docker push $DOCKER_REPO:$DOCKER_TAG
      
  deploy-to-gke:
    runs-on: [self-hosted, linux, x64]
    needs: image-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/Service.yaml
