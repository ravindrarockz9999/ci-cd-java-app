name: Java Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

  build:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven (Skip Tests)
        run: mvn clean package -DskipTests

      - name: List files in target directory
        run: ls -la target/
  
      - name: Upload Build Artifact (WAR)
        uses: actions/upload-artifact@v4
        with:
          name: java-app-war
          path: target/welcome-message-1.0-SNAPSHOT.war

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and Run Tests with Maven
        run: mvn clean verify

      - name: List JaCoCo coverage report
        run: |
          ls -R target/site/jacoco || echo "No coverage report found"

      - name: Upload JaCoCo report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

  sonar-scan:
    name: sonar-scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Download JaCoCo report
        uses: actions/download-artifact@v4
        with:
          name: jacoco-report
          path: jacoco-report
      - name: List downloaded JaCoCo report contents
        run: ls -R jacoco-report
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  semgrep:
    runs-on: ubuntu-latest
    needs: sonar-scan
    steps:
     - uses: actions/checkout@v3

     - name: Run Semgrep
       uses: returntocorp/semgrep-action@v1
       with:
        semgrep_version: 1.76.0
        config: auto

  dependency-check-trivy-scan:
    runs-on: ubuntu-latest
    needs: semgrep
    steps:
      - uses: actions/checkout@v3
  
      - name: Install Trivy CLI (v0.38.3)
        run: |
          sudo apt update
          sudo apt install -y wget apt-transport-https
          wget https://github.com/aquasecurity/trivy/releases/download/v0.38.3/trivy_0.38.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.38.3_Linux-64bit.deb
          trivy --version

      - name: Run Trivy Scan
        run: |
          trivy fs . --format table --severity HIGH,CRITICAL

  malware-scan:
    runs-on: ubuntu-latest
    needs: dependency-check-trivy-scan
    steps:
      - uses: actions/checkout@v3
  
      - name: Install ClamAV and run scan
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav
          sudo systemctl stop clamav-freshclam 
          sudo freshclam
          sudo freshclam 
          clamscan -r . | tee malware-scan-results.txt
  
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: malware-scan-results
          path: malware-scan-results.txt

  image-build:
   runs-on: ubuntu-latest
   env:
    DOCKER_REPO: ravindra9999/ci-cd
    DOCKER_TAG: latest
   needs: malware-scan
   steps:
    - uses: actions/checkout@v3

    - name: Download WAR Artifact
      uses: actions/download-artifact@v4
      with:
        name: java-app-war
        path: target

    - name: Build Docker image
      run: |
        docker build -t $DOCKER_REPO:$DOCKER_TAG .
        docker images

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y
        docker images

    - name: Trivy Docker Scan
      run: trivy image $DOCKER_REPO:$DOCKER_TAG

    - name: Docker Login
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Docker Push
      run: docker push $DOCKER_REPO:$DOCKER_TAG
